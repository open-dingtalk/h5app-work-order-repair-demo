{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","domain","corpId","authCode","userId","userName","this","login","className","axios","get","then","res","data","loginAction","catch","error","alert","JSON","stringify","_this","dd","permission","requestAuthCode","onSuccess","code","success","setTimeout","setState","onFail","err","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAgFeA,E,kDA1EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAGTC,OAAQ,GACRC,OAAQ,GACRC,SAAU,GACVC,OAAQ,GACRC,SAAU,IATC,E,0CAanB,WAKI,MAJ0B,KAAtBC,KAAKN,MAAMI,QAEXE,KAAKC,QAIL,aADA,CACA,OAAKC,UAAU,U,mBAOvB,WAAS,IAAD,OACJC,IAAMC,IAAIJ,KAAKN,MAAMC,OAAS,cACzBU,MAAK,SAAAC,GACEA,EAAIC,MACJ,EAAKC,YAAYF,EAAIC,SAE1BE,OAAM,SAAAC,GACTC,MAAM,eAAiBC,KAAKC,UAAUH,S,yBAK9C,SAAYd,GAER,IAAIkB,EAAQd,KACZe,UAAWC,WAAWC,gBAAgB,CAClCrB,OAAQA,EACRsB,UAAW,SAAUZ,GAEjBQ,EAAMpB,MAAMG,SAAWS,EAAIa,KAC3BhB,IAAMC,IAAIU,EAAMpB,MAAMC,OAAS,mBAAqBmB,EAAMpB,MAAMG,UAC9DQ,MAAK,SAAAC,GACH,GAAIA,GAAOA,EAAIC,KAAKa,QAAS,CACzB,IAAItB,EAASQ,EAAIC,KAAKA,KAAKT,OACvBC,EAAWO,EAAIC,KAAKA,KAAKR,SAC7BY,MAAM,6CAAYZ,GAClBsB,YAAW,WACPP,EAAMQ,SAAS,CACXxB,OAAQA,EACRC,SAAUA,MAEf,QAEHY,MAAM,uBAAsBC,KAAKC,UAAUP,OAEhDG,OAAM,SAAAC,GACLC,MAAM,6BAA4BC,KAAKC,UAAUH,QAGzDa,OAAQ,SAAUC,GAEdb,MAAM,iCAAgCC,KAAKC,UAAUW,W,GArEnDC,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ba873937.chunk.js","sourcesContent":["import axios from 'axios';\nimport React from 'react';\nimport './App.css';\nimport * as dd from \"dingtalk-jsapi\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            //内网穿透工具介绍:\n            // https://developers.dingtalk.com/document/resourcedownload/http-intranet-penetration?pnamespace=app\n            domain: \"\",\n            corpId: '',\n            authCode: '',\n            userId: '',\n            userName: ''\n        }\n    }\n\n    render() {\n        if (this.state.userId === '') {\n            // 免登操作\n            this.login();\n        }\n        return (\n            // 主编写模块\n            <div className=\"App\">\n\n            </div>\n        );\n    }\n\n    //登录-获取corpId\n    login() {\n        axios.get(this.state.domain + \"/getCorpId\")\n            .then(res => {\n                if (res.data) {\n                    this.loginAction(res.data);\n                }\n            }).catch(error => {\n            alert(\"corpId err, \" + JSON.stringify(error))\n        })\n    }\n\n    //登录操作\n    loginAction(corpId) {\n        // alert(\"corpId: \" +  corpId);\n        let _this = this;\n        dd.runtime.permission.requestAuthCode({\n            corpId: corpId,//企业 corpId\n            onSuccess: function (res) {\n                // 调用成功时回调\n                _this.state.authCode = res.code\n                axios.get(_this.state.domain + \"/login?authCode=\" + _this.state.authCode\n                ).then(res => {\n                    if (res && res.data.success) {\n                        let userId = res.data.data.userId;\n                        let userName = res.data.data.userName;\n                        alert('登录成功，你好' + userName);\n                        setTimeout(function () {\n                            _this.setState({\n                                userId: userId,\n                                userName: userName\n                            })\n                        }, 0)\n                    } else {\n                        alert(\"login failed --->\" + JSON.stringify(res));\n                    }\n                }).catch(error => {\n                    alert(\"httpRequest failed --->\" + JSON.stringify(error))\n                })\n            },\n            onFail: function (err) {\n                // 调用失败时回调\n                alert(\"requestAuthCode failed --->\" + JSON.stringify(err))\n            }\n        });\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}